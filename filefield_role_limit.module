<?php

/**
 * @file
 * FileField Role Limit: Configure upload max size limit per role.
 *
 * The FileField Role Limit module helps to configure different
 * FileField max upload size settings for each user role.
 * The max upload size limit can be per file and per node type.
 */

/**
 * Implements hook_help().
 */
function filefield_role_limit_help($path, $arg) {
  switch ($path) {
    case 'admin/help#filefield_role_limit':
      // Return a line-break version of the module README.txt.
      return filter_filter('process', 1, NULL, file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}

/**
 * Implements hook_widget_settings_alter().
 */
function filefield_role_limit_widget_settings_alter(&$settings, $op, $widget) {
  $supported_widgets = array_keys(filefield_role_limit_elements());
  $widget_types = array('filefield_widget', 'imagefield_widget');
  if ((!empty($widget['type']) && in_array($widget['type'], $supported_widgets))
    || (!empty($widget['widget_type']) && in_array($widget['widget_type'], $supported_widgets))
    ) {
    switch ($op) {
      case 'form':
        $roles = user_roles();
        if (!empty($roles)) {
          $current_maxsize = format_size(file_upload_max_size());
          $perfile_description = t('Specify the size limit that applies to each file separately for users for each role.');
          $perfile_description .= ' ' . t('Enter a value like "512" (bytes), "80K" (kilobytes) or "50M" (megabytes) in order to restrict the allowed file size.');
          $perfile_description .= ' ' . t("If you leave this empty the file sizes will be limited only by PHP's maximum post and file upload sizes");
          $perfile_description .= ' ' . t('(current limit <strong>%limit</strong>).', array('%limit' => $current_maxsize));
          $pernode_description = t('Specify the total size limit for all files in field on a given node for users for each role.');
          $pernode_description .= ' ' . t('Enter a value like "512" (bytes), "80K" (kilobytes) or "50M" (megabytes) in order to restrict the total size of a node.');
          $pernode_description .= ' ' . t('Leave this empty if there should be no size restriction.');
          $pernode_description .= ' ' . t('(current limit <strong>%limit</strong>).', array('%limit' => $current_maxsize));
          $settings['max_filesize']['filefield_role_limit_file_per_role'] = array(
            '#type' => 'fieldset',
            '#title' => t('Maximum upload size per file per role'),
            '#description' => $perfile_description,
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
          );
          $settings['max_filesize']['filefield_role_limit_node_per_role'] = array(
            '#type' => 'fieldset',
            '#title' => t('Maximum upload size per node per role'),
            '#description' => $pernode_description,
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
          );
          foreach ($roles as $rid => $role) {
            $settings['max_filesize']['filefield_role_limit_file_per_role']['max_filesize_per_file_role_' . $rid] = array(
              '#type' => 'textfield',
              '#title' => t('Maximum upload size per file for role %role', array('%role' => $role)),
              '#default_value' => $widget['max_filesize_per_file_role_' . $rid],
              '#element_validate' => array('_filefield_role_limit_widget_settings_max_filesize_validate'),
            );
            $settings['max_filesize']['filefield_role_limit_node_per_role']['max_filesize_per_node_role_' . $rid] = array(
              '#type' => 'textfield',
              '#title' => t('Maximum upload size per node for role %role', array('%role' => $role)),
              '#default_value' => $widget['max_filesize_per_node_role_' . $rid],
              '#element_validate' => array('_filefield_role_limit_widget_settings_max_filesize_validate'),
            );
          }
        }
        break;

      case 'save':
        $roles = user_roles();
        foreach ($roles as $rid => $role) {
          $settings[] = 'max_filesize_per_file_role_' . $rid;
          $settings[] = 'max_filesize_per_node_role_' . $rid;
        }
        break;

    }
  }
}

/**
 * Implements hook_elements().
 */
function filefield_role_limit_elements() {
  return array(
    'filefield_widget' => array(
      '#process' => array('filefield_role_limit_widget_process'),
    ),
    'imagefield_widget' => array(
      '#process' => array('filefield_role_limit_widget_process'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function filefield_role_limit_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id) {
    $fields = filefield_get_field_list($form['type']['#value']);
    if (!empty($fields)) {
      $fields_name = array_keys($fields);
      foreach ($fields_name as $field_name) {
        if (isset($form['#field_info'][$field_name]['widget']['max_filesize_per_node'])) {
          $max_size_node_raw = _filefield_role_limit_get_element_max_size($form[$field_name][0], NULL, 'node', TRUE);
          $form['#field_info'][$field_name]['widget']['max_filesize_per_node'] = $max_size_node_raw;
        }
        if (isset($form[$field_name][0]['#upload_validators']['filefield_validate_size'])) {
          $max_size_file_plain = _filefield_role_limit_get_element_max_size($form[$field_name][0], NULL, 'file', FALSE);
          $form[$field_name][0]['#upload_validators']['filefield_validate_size'] = array($max_size_file_plain);
        }
      }
    }
  }
}

/**
 * Element process callback for filefield fields.
 *
 * Adds a role-specific max size upload limit to the current filefield field.
 */
function filefield_role_limit_widget_process($element, $edit, &$form_state, $form) {
  if (isset($element['#upload_validators']['filefield_validate_size'])) {
    $max_upload_size_plain = _filefield_role_limit_get_element_max_size($element);
    $element['#upload_validators']['filefield_validate_size'] = array($max_upload_size_plain);
    if (isset($element['upload'])) {
      foreach ($element['#upload_validators'] as $callback => $arguments) {
        $help_func = $callback . '_help';
        if (function_exists($help_func)) {
          $desc[] = call_user_func_array($help_func, $arguments);
        }
      }
      $element['upload']['#description'] = implode('<br />', $desc);
    }
  }
  return $element;
}

/**
 * Get the upload size limit for a specified or current user.
 *
 * Each user role could have a different upload size limit,
 * so it will be taken the max upload size limit through all user roles.
 * If use has no limits for its roles, the default field settings will be
 * taken.
 *
 * @param array $element
 *   A CCK field element as array.
 * @param object|null $account
 *   (optional) The user to be checked.
 *   If no user is provided, the current user will be used.
 * @param string $type
 *   (optional) The type of limit (possible values: 'file', 'node').
 * @param bool $is_raw
 *   (optional) If TRUE, returns a not parsed limit value
 *   like "512" (bytes), "80K" (kilobytes) or "50M" (megabytes).
 *
 * @return int|string
 *   The max upload size for the user as integer or string.
 */
function _filefield_role_limit_get_element_max_size($element, $account = NULL, $type = 'file', $is_raw = FALSE) {
  static $limits;
  if (is_null($account)) {
    global $user;
    $account = $user;
  }
  if (!is_array($limits)) {
    $limits = array();
  }
  if (!isset($limits[$element['#field_name']])) {
    $limits[$element['#field_name']] = array();
  }
  if (!isset($limits[$element['#field_name']][$type])) {
    $limits[$element['#field_name']][$type] = array();
  }
  $raw_type = 'parsed';
  if ($is_raw) {
    $raw_type = 'raw';
  }
  if (isset($limits[$element['#field_name']][$type][$account->uid][$raw_type])
    && !empty($limits[$element['#field_name']][$type][$account->uid][$raw_type])) {
    return $limits[$element['#field_name']][$type][$account->uid][$raw_type];
  }
  $max_upload_size = 0;
  $roles = array();
  if (!empty($account->roles)) {
    $roles = array_keys($account->roles);
  }
  if (isset($element['#upload_validators']['filefield_validate_associate_field'][0]['widget'])) {
    $widgets = $element['#upload_validators']['filefield_validate_associate_field'][0]['widget'];
    if (!empty($roles)) {
      foreach ($roles as $rid) {
        if (isset($widgets['max_filesize_per_' . $type . '_role_' . $rid])
          && !empty($widgets['max_filesize_per_' . $type . '_role_' . $rid])
          && parse_size($widgets['max_filesize_per_' . $type . '_role_' . $rid]) > parse_size($max_upload_size)) {
          $max_upload_size = $widgets['max_filesize_per_' . $type . '_role_' . $rid];
        }
      }
    }
    // Default settings value.
    if ($max_upload_size == 0 && !empty($widgets['max_filesize_per_' . $type . ''])) {
      $max_upload_size = $widgets['max_filesize_per_' . $type . ''];
    }
    // Default system value.
    if ($max_upload_size == 0) {
      $max_upload_size = file_upload_max_size();
    }
  }
  $limits[$element['#field_name']][$type][$account->uid]['raw'] = $max_upload_size;
  $limits[$element['#field_name']][$type][$account->uid]['parsed'] = parse_size($max_upload_size);
  if ($is_raw) {
    return $limits[$element['#field_name']][$type][$account->uid]['raw'];
  }
  return $limits[$element['#field_name']][$type][$account->uid]['parsed'];
}

/**
 * Validation function for filefield widget settings.
 *
 * @param array $element
 *   the filefield field element.
 * @param array $form_state
 *   the form_state of filefield widget settings' form.
 *
 * @see _filefield_widget_settings_max_filesize_per_file_validate()
 * @see _filefield_widget_settings_max_filesize_per_node_validate()
 */
function _filefield_role_limit_widget_settings_max_filesize_validate($element, &$form_state) {
  if (empty($form_state['values'][$element['#name']])) {
    // Empty means no size restrictions, so don't throw an error.
    return;
  }
  $max_size = parse_size($form_state['values'][$element['#name']]);
  if (is_null($max_size) || !is_numeric($max_size)) {
    $err_message = array();
    // Element[#title] can contain <em> tag, so I insert it plain,
    // to escape later for security reasons.
    $err_message = t('The !field option must contain a valid value.', array('!field' => $element['#title']));
    $err_message .= ' ' . t('You can either leave the text field empty or enter a string like "512" (bytes), "80K" (kilobytes) or "50M" (megabytes).');
    // Escape element[#title], leaving only <em> tags.
    form_error($element, filter_xss($err_message, array('em')));
  }
}
