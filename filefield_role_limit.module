<?php

/**
 * @file
 * FileField Role Limit: Configure upload max size limit per role.
 *
 * The FileField Role Limit module helps to configure different
 * FileField max upload size settings for each user role.
 * The max upload size limit can be per file and per node type.
 */

/**
 * Implementation of hook_widget_settings_alter().
 */
function filefield_role_limit_widget_settings_alter(&$settings, $op, $widget) {
  $aSupportedWidgets = array_keys(filefield_role_limit_elements());
  $widget_types = array('filefield_widget', 'imagefield_widget');
  if ((empty($widget['type'])===FALSE && in_array($widget['type'], $aSupportedWidgets))
    || (empty($widget['widget_type'])===FALSE && in_array($widget['widget_type'], $aSupportedWidgets))
    ) {
    switch ($op) {
      case 'form':
        $aRoles = user_roles();
        if (empty($aRoles)===FALSE) {
          $settings['max_filesize']['filefield_role_limit_file_per_role'] = array(
            '#type' => 'fieldset',
            '#title' => t('Maximum upload size per file per role'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
          );
          $settings['max_filesize']['filefield_role_limit_node_per_role'] = array(
            '#type' => 'fieldset',
            '#title' => t('Maximum upload size per node per role'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
          );
          foreach ($aRoles as $nRid => $sRole) {
            $settings['max_filesize']['filefield_role_limit_file_per_role']['max_filesize_per_file_role_'. $nRid] = array(
              '#type' => 'textfield',
              '#title' => t('Maximum upload size per file for role %role', array('%role' => $sRole)),
              '#default_value' => $widget['max_filesize_per_file_role_'. $nRid],
              '#description' => t('Specify the size limit that applies to each file separately for users with role %role. Enter a value like "512" (bytes), "80K" (kilobytes) or "50M" (megabytes) in order to restrict the allowed file size. If you leave this empty the file sizes will be limited only by PHP\'s maximum post and file upload sizes (current limit <strong>%limit</strong>).', array('%limit' => format_size(file_upload_max_size()), '%role' => $sRole)),
              '#element_validate' => array('_filefield_role_limit_widget_settings_max_filesize_per_file_validate'),
            );
            $settings['max_filesize']['filefield_role_limit_node_per_role']['max_filesize_per_node_role_'. $nRid] = array(
              '#type' => 'textfield',
              '#title' => t('Maximum upload size per node for role %role', array('%role' => $sRole)),
              '#default_value' => $widget['max_filesize_per_node_role_'. $nRid],
              '#description' => t('Specify the total size limit for all files in field on a given node for users with role %role. Enter a value like "512" (bytes), "80K" (kilobytes) or "50M" (megabytes) in order to restrict the total size of a node. Leave this empty if there should be no size restriction.', array('%limit' => format_size(file_upload_max_size()), '%role' => $sRole)),
              '#element_validate' => array('_filefield_role_limit_widget_settings_max_filesize_per_node_validate'),
            );
          }
        }
      break;
      case 'save':
        $aRoles = user_roles();
        foreach ($aRoles as $nRid => $sRole) {
          $settings[] = 'max_filesize_per_file_role_'. $nRid;
          $settings[] = 'max_filesize_per_node_role_'. $nRid;
        }
      break;
    }
  }
}

/**
 * Implementation of hook_elements().
 */
function filefield_role_limit_elements() {
  return array(
    'filefield_widget' => array(
      '#process' => 'filefield_role_limit_widget_process',
    ),
    'imagefield_widget' => array(
      '#process' => 'filefield_role_limit_widget_process',
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 */
function filefield_role_limit_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type'])===TRUE && isset($form['#node'])===TRUE && $form['type']['#value'] . '_node_form' == $form_id) {
    $aFields = filefield_get_field_list($form['type']['#value']);
    if (empty($aFields)===FALSE) {
      $aFieldsName = array_keys($aFields);
      foreach ($aFieldsName as $sFieldName) {
        if (isset($form['#field_info'][$sFieldName]['widget']['max_filesize_per_node'])===TRUE) {
          $nMaxSize = _filefield_role_limit_get_element_max_size($form[$sFieldName][0], NULL, 'node', TRUE);
          $form['#field_info'][$sFieldName]['widget']['max_filesize_per_node'] = $nMaxSize;
        }
      }
    }
  }
}

/**
 * Element #process callback function.
 */
function filefield_role_limit_widget_process($element, $edit, &$form_state, $form) {
  if (isset($element['#upload_validators']['filefield_validate_size'])===TRUE) {
    $nMaxUploadSize = _filefield_role_limit_get_element_max_size($element);
    $element['#upload_validators']['filefield_validate_size'] = array($nMaxUploadSize);
    if (isset($element['upload'])===TRUE) {
      foreach ($element['#upload_validators'] as $callback => $arguments) {
        $help_func = $callback .'_help';
        if (function_exists($help_func)) {
          $desc[] = call_user_func_array($help_func, $arguments);
        }
      }
      $element['upload']['#description'] = implode('<br />', $desc);
    }
  }
  return $element;
}

/**
 * Get the upload size limit for a specified or current user.
 *
 * Each user role could have a different upload size limit,
 * so it will be taken the max upload size limit through all user roles.
 * If use has no limits for its roles, the default field settings will be taken.
 *
 * @param $element
 *   A CCK field element as array.
 * @param $oUser
 *   The user to be checked.
 *   If no user is provided, the current user will be used.
 * @param $sType
 *   The type of limit (possible values: 'file', 'node').
 * @param $bRaw
 *   If TRUE, it will return a not parse limit value
 *   like "512" (bytes), "80K" (kilobytes) or "50M" (megabytes).
 *
 * @return
 *   The max upload size for the user as integer or string.
 */
function _filefield_role_limit_get_element_max_size($element, $oUser=NULL, $sType='file', $bRaw=FALSE) {
  static $aLimits;
  if (is_null($oUser)===TRUE) {
    global $user;
    $oUser = $user;
  }
  if (is_array($aLimits)===FALSE) {
    $aLimits = array();
  }
  if (isset($aLimits[$element['#field_name']])===FALSE) {
    $aLimits[$element['#field_name']] = array();
  }
  $sRawtype = 'parsed';
  if ($bRaw===TRUE) {
    $sRawtype = 'raw';
  }
  if (isset($aLimits[$element['#field_name']][$oUser->uid][$sRawtype])===TRUE
    && empty($aLimits[$element['#field_name']][$oUser->uid][$sRawtype])===FALSE) {
    return $aLimits[$element['#field_name']][$oUser->uid][$sRawtype];
  }
  $nMaxUploadSize = 0;
  $aRoles = array();
  if (empty($oUser->roles)===FALSE) {
    $aRoles = array_keys($oUser->roles);
  }
  if (isset($element['#upload_validators']['filefield_validate_associate_field'][0]['widget'])===TRUE) {
    $aWidget = $element['#upload_validators']['filefield_validate_associate_field'][0]['widget'];
    if (empty($aRoles)===FALSE) {
      foreach ($aRoles as $nRid) {
        if (isset($aWidget['max_filesize_per_'. $sType .'_role_'. $nRid])===TRUE
          && empty($aWidget['max_filesize_per_'. $sType .'_role_'. $nRid])===FALSE
          && parse_size($aWidget['max_filesize_per_'. $sType .'_role_'. $nRid])>$nMaxUploadSize) {
      if ($bRaw===TRUE) {
        $nMaxUploadSize = $aWidget['max_filesize_per_'. $sType .'_role_'. $nRid];
      }
      else {
        $nMaxUploadSize = parse_size($aWidget['max_filesize_per_'. $sType .'_role_'. $nRid]);
      }
        }
      }
    }
    // Default settings value
    if ($nMaxUploadSize==0 && empty($aWidget['max_filesize_per_'. $sType .''])===FALSE) {
      if ($bRaw===TRUE) {
        $nMaxUploadSize = $aWidget['max_filesize_per_'. $sType .''];
      }
      else {
        $nMaxUploadSize = parse_size($aWidget['max_filesize_per_'. $sType .'']);
      }
    }
    // Default system value
    if ($nMaxUploadSize==0) {
      if ($bRaw===TRUE) {
        $nMaxUploadSize = file_upload_max_size();
      }
      else {
        $nMaxUploadSize = parse_size(file_upload_max_size());
      }
    }
  }
  $aLimits[$element['#field_name']][$oUser->uid][$sRawtype] = $nMaxUploadSize;
  return $nMaxUploadSize;
}

/**
 * Validation function for filefield widget settings.
 *
 * @param $element
 *   the filefield field element.
 * @param $form_state
 *   the form_state of filefield widget settings' form.
 *
 * @see _filefield_widget_settings_max_filesize_per_file_validate()
 */
function _filefield_role_limit_widget_settings_max_filesize_per_file_validate($element, &$form_state) {
  if (empty($form_state['values']['max_filesize_per_file'])) {
    return; // Empty means no size restrictions, so don't throw an error.
  }
  if (empty($form_state['values'][$element['#name']])) {
    return; // Empty means no size restrictions, so don't throw an error.
  }
  if (!is_numeric(parse_size($form_state['values'][$element['#name']]))) {
    form_error($element, t('The "@field" option must contain a valid value. You can either leave the text field empty or enter a string like "512" (bytes), "80K" (kilobytes) or "50M" (megabytes).', array('@field' => $element['#title'])));
  }
}

/**
 * Validation function for filefield widget settings.
 *
 * @param $element
 *   the filefield field element.
 * @param $form_state
 *   the form_state of filefield widget settings' form.
 *
 * @see _filefield_widget_settings_max_filesize_per_node_validate()
 */
function _filefield_role_limit_widget_settings_max_filesize_per_node_validate($element, &$form_state) {
  if (empty($form_state['values']['max_filesize_per_node'])) {
    return; // Empty means no size restrictions, so don't throw an error.
  }
  if (empty($form_state['values'][$element['#name']])) {
    return; // Empty means no size restrictions, so don't throw an error.
  }
  if (!is_numeric(parse_size($form_state['values'][$element['#name']]))) {
    form_error($element, t('The "@field" option must contain a valid value. You can either leave the text field empty or enter a string like "512" (bytes), "80K" (kilobytes) or "50M" (megabytes).', array('@field' => $element['#title'])));
  }
}